YOUR_CLIENT_ID: ab7a5c6a50764046b81b79409029b260
YOUR_CLIENT_SECRET: aeb68c5ae59b4b92952808de09bee7d1

1. npm install node-fetch

2. Modify src/controllers/trackController.ts:

import { Request, Response } from 'express';
import fetch from 'node-fetch';
import { getRepository } from 'typeorm';
import { Track } from '../entities/Track';

const SPOTIFY_API_URL = 'https://api.spotify.com/v1';

// Function to fetch Spotify access token
const fetchAccessToken = async () => {
  const response = await fetch('https://accounts.spotify.com/api/token', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      Authorization: `Basic ${Buffer.from('YOUR_CLIENT_ID:YOUR_CLIENT_SECRET').toString('base64')}`, // Replace with your client ID and secret
    },
    body: 'grant_type=client_credentials',
  });

  const data = await response.json();
  return data.access_token;
};

export const createTrack = async (req: Request, res: Response) => {
  const { isrc } = req.body;

  try {
    const accessToken = await fetchAccessToken();
    const trackResponse = await fetch(`${SPOTIFY_API_URL}/search?q=isrc:${isrc}&type=track`, {
      headers: {
        Authorization: `Bearer ${accessToken}`,
      },
    });

    const trackData = await trackResponse.json();
    const trackInfo = trackData.tracks.items[0];

    const track = new Track();
    track.isrc = isrc;
    track.title = trackInfo.name;
    track.artist = trackInfo.artists.map((artist: any) => artist.name).join(', ');
    track.imageUrl = trackInfo.album.images[0]?.url || '';

    const trackRepository = getRepository(Track);
    await trackRepository.save(track);

    res.status(201).json(track);
  } catch (error) {
    console.error('Error fetching or saving track data:', error);
    res.status(500).json({ error: 'An error occurred while processing the request.' });
  }
};

export const getTrackByISRC = async (req: Request, res: Response) => {
  const { isrc } = req.params;

  try {
    const accessToken = await fetchAccessToken();
    const trackResponse = await fetch(`${SPOTIFY_API_URL}/search?q=isrc:${isrc}&type=track`, {
      headers: {
        Authorization: `Bearer ${accessToken}`,
      },
    });

    const trackData = await trackResponse.json();
    const trackInfo = trackData.tracks.items[0];

    if (trackInfo) {
      const track: Partial<Track> = {
        isrc,
        title: trackInfo.name,
        artist: trackInfo.artists.map((artist: any) => artist.name).join(', '),
        imageUrl: trackInfo.album.images[0]?.url || '',
      };
      res.status(200).json(track);
    } else {
      res.status(404).json({ error: 'Track not found' });
    }
  } catch (error) {
    console.error('Error fetching track by ISRC:', error);
    res.status(500).json({ error: 'An error occurred while processing the request.' });
  }
};


3. Update swaggerDef.ts:

import { Options } from 'swagger-jsdoc';

const swaggerDef: Options = {
  swaggerDefinition: {
    openapi: '3.0.0',
    info: {
      title: 'Music Metadata API',
      version: '1.0.0',
      description: 'API to store and retrieve music track metadata',
    },
  },
  apis: ['src/routes/*.ts'],
  // Add your ISRC parameter definition here
  parameters: {
    isrc: {
      name: 'isrc',
      in: 'body',
      description: 'ISRC identifier of the music track',
      required: true,
      schema: {
        type: 'string',
      },
    },
  },
};

export default swaggerDef;



